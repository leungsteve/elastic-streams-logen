filebeat.inputs:
# Nginx logs - Common Log Format for field extraction demo
- type: log
  enabled: true
  paths:
    - ./logs/nginx/*.log
  fields:
    service: nginx
    log_type: nginx
    environment: demo
  fields_under_root: false
  multiline.pattern: '^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}'
  multiline.negate: true
  multiline.match: after

# Java application logs - JSON format
- type: log
  enabled: true
  paths:
    - ./logs/java_app/*.log
  fields:
    service: user-service
    log_type: java_app
    environment: demo
  fields_under_root: false
  json.keys_under_root: true
  json.add_error_key: true
  json.message_key: message

# Kubernetes logs - JSON format
- type: log
  enabled: true
  paths:
    - ./logs/kubernetes/*.log
  fields:
    service: kubernetes
    log_type: kubernetes
    environment: demo
  fields_under_root: false
  json.keys_under_root: true
  json.add_error_key: true

# System access logs - Syslog format
- type: log
  enabled: true
  paths:
    - ./logs/system_access/*.log
  fields:
    service: sshd
    log_type: system_access
    environment: demo
  fields_under_root: false
  multiline.pattern: '^[A-Za-z]{3} [0-9]{1,2} [0-9]{2}:[0-9]{2}:[0-9]{2}'
  multiline.negate: true
  multiline.match: after

# E-commerce transaction logs - JSON format
- type: log
  enabled: true
  paths:
    - ./logs/ecommerce/*.log
  fields:
    service: payment-gateway
    log_type: ecommerce
    environment: demo
  fields_under_root: false
  json.keys_under_root: true
  json.add_error_key: true

# API Gateway logs - JSON format
- type: log
  enabled: true
  paths:
    - ./logs/api_gateway/*.log
  fields:
    service: api-gateway
    log_type: api_gateway
    environment: demo
  fields_under_root: false
  json.keys_under_root: true
  json.add_error_key: true

# Database logs - Text format for parsing demo
- type: log
  enabled: true
  paths:
    - ./logs/database/*.log
  fields:
    service: postgresql
    log_type: database
    environment: demo
  fields_under_root: false
  multiline.pattern: '^[0-9]{4}-[0-9]{2}-[0-9]{2} [0-9]{2}:[0-9]{2}:[0-9]{2}'
  multiline.negate: true
  multiline.match: after

# Docker container logs - JSON format
- type: log
  enabled: true
  paths:
    - ./logs/docker/*.log
  fields:
    service: docker
    log_type: docker
    environment: demo
  fields_under_root: false
  json.keys_under_root: true
  json.add_error_key: true

# CDN logs - Text format for extraction demo
- type: log
  enabled: true
  paths:
    - ./logs/cdn/*.log
  fields:
    service: cloudfront
    log_type: cdn
    environment: demo
  fields_under_root: false

# CI/CD pipeline logs - JSON format
- type: log
  enabled: true
  paths:
    - ./logs/cicd/*.log
  fields:
    service: github-actions
    log_type: cicd
    environment: demo
  fields_under_root: false
  json.keys_under_root: true
  json.add_error_key: true

# Output configuration for Elastic Cloud Serverless
output.elasticsearch:
  hosts: ["serverlessobservability-01-db07c4.es.us-central1.gcp.elastic.cloud:443"]
  api_key: "LKyol5gBMB4lIUGC5CYg:Mdvhre4QoLu6US2ePn-YFg"
  protocol: "https"
  
  # Data stream configuration for Elastic Streams
  index: "logs-elastic-streams-demo"
  
  # Template settings for optimal field extraction
setup.template.enabled: true
setup.template.name: "elastic-streams-demo"
setup.template.pattern: "logs-elastic-streams-demo-*"
setup.template.settings:
  number_of_shards: 1
  number_of_replicas: 0
setup.template.mappings:
  properties:
    "@timestamp":
      type: date
    host:
      type: keyword
    service:
      type: keyword
    log_type:
      type: keyword
    environment:
      type: keyword
    correlation_id:
      type: keyword
    # Nginx specific fields
    remote_addr:
      type: ip
    method:
      type: keyword
    request_uri:
      type: keyword
    status:
      type: long
    response_time:
      type: float
    # Java app fields
    level:
      type: keyword
    logger:
      type: keyword
    thread:
      type: keyword
    # Security fields
    source_ip:
      type: ip
    user:
      type: keyword
    action:
      type: keyword
    result:
      type: keyword
    session_id:
      type: keyword
    # Business fields
    order_id:
      type: keyword
    customer_id:
      type: keyword
    amount:
      type: float
    payment_method:
      type: keyword
    error_code:
      type: keyword

# Processor configuration for field extraction
processors:
  - add_host_metadata:
      when.not.contains.tags: forwarded
  - add_docker_metadata: ~
  - add_kubernetes_metadata: ~
  
  # Extract correlation IDs from all log types
  - dissect:
      tokenizer: '%{} correlation_id="%{correlation_id}"%{}'
      field: "message"
      target_prefix: ""
      ignore_failure: true

  # Process Nginx logs for field extraction demo
  - dissect:
      when.equals:
        log_type: nginx
      tokenizer: '%{remote_addr} - - [%{timestamp}] "%{method} %{request_uri} %{http_version}" %{status} %{bytes_sent} "%{referrer}" "%{user_agent}" rt=%{response_time} %{}'
      field: "message"
      target_prefix: ""
      ignore_failure: true
  
  # Convert numeric fields
  - convert:
      fields:
        - {from: "status", to: "status_code", type: "long"}
        - {from: "response_time", to: "response_time_float", type: "float"}
        - {from: "bytes_sent", to: "bytes_sent_long", type: "long"}
      ignore_missing: true
      fail_on_error: false

  # Process system access logs
  - dissect:
      when.equals:
        log_type: system_access
      tokenizer: '%{timestamp} %{hostname} %{process}: %{result} %{action} for user %{user} from %{source_ip} port %{port} %{}'
      field: "message"
      target_prefix: ""
      ignore_failure: true

  # Enrich with GeoIP for IP addresses
  - add_locale: ~
  
  # Tag security events for easier filtering
  - add_tags:
      tags: [security_event]
      when.or:
        - equals:
            result: "FAILED"
        - equals:
            status: 401
        - equals:
            status: 403

  # Tag business critical events
  - add_tags:
      tags: [business_critical]
      when.or:
        - equals:
            status: "failed"
        - equals:
            error_code: "GATEWAY_TIMEOUT"
        - equals:
            rate_limit_exceeded: true

# Logging configuration
logging.level: info
logging.to_files: false
logging.to_stderr: true

# Monitoring
monitoring:
  enabled: true
  elasticsearch:
    hosts: ["serverlessobservability-01-db07c4.es.us-central1.gcp.elastic.cloud:443"]
    api_key: "LKyol5gBMB4lIUGC5CYg:Mdvhre4QoLu6US2ePn-YFg"
